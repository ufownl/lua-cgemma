worker_processes auto;

events {
}

http {
  include mime.types;

  init_worker_by_lua_block {
    local sched, err = require("cgemma").scheduler(1)
    if not sched then
      ngx.log(ngx.ERR, "cgemma error: ", err)
    end
    worker_idle_instances = {}
    function get_gemma()
      if #worker_idle_instances > 0 then
        local gemma = worker_idle_instances[#worker_idle_instances]
        table.remove(worker_idle_instances)
        return gemma
      end
      local gemma, err = require("cgemma").new({
        scheduler = sched,
        tokenizer = "tokenizer.spm",
        model = "2b-it",
        compressed_weights = "2b-it-sfp.sbs"
      })
      if not gemma then
        ngx.log(ngx.ERR, "cgemma error: ", err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
      return gemma
    end
    function release_gemma(gemma)
      if #worker_idle_instances < 2 then
        table.insert(worker_idle_instances, gemma)
        ngx.log(ngx.ERR, "Idle instances: ", #worker_idle_instances)
      end
    end
  }

  server {
    listen 8042;
    root html;

    location = /cgemma/session {
      content_by_lua_block {
        local gemma = get_gemma()
        local seed, err = gemma:start_session()
        if not seed then
          ngx.log(ngx.ERR, "cgemma error: ", err)
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end
        local ws, err = require("resty.websocket.server"):new({
          max_payload_len = 65536,
          timeout = 300000
        })
        if not ws then
          release_gemma(gemma)
          ngx.log(ngx.ERR, "websocket error: ", err)
          ngx.exit(ngx.HTTP_CLOSE)
        end
        local bytes, err = ws:send_text(require("cjson.safe").encode({
          role = "system",
          text = string.format("New session started! Random seed of current session: %d", seed)
        }))
        if not bytes then
          release_gemma(gemma)
          ngx.log(ngx.ERR, "websocket error: ", err)
          ngx.exit(ngx.OK)
        end
        while gemma:ready() do
          local data, tp, err = ws:recv_frame()
          if tp == "text" then
            local msg = require("cjson.safe").decode(data)
            if not msg or not msg.role then
              release_gemma(gemma)
              ngx.log(ngx.ERR, "protocol error: unknown format")
              ws:send_close()
              ngx.exit(ngx.OK)
            end
            if msg.role == "user" then
              if msg.text then
                local ok, err = gemma(msg.text, function(token, pos, prompt_size)
                  local bytes, err = ws:send_text(require("cjson.safe").encode({
                    role = "gemma",
                    token = token,
                    pos = pos,
                    prompt_size = prompt_size
                  }))
                  if not bytes then
                    ngx.log(ngx.ERR, "websocket error: ", err)
                    return false
                  end
                  return true
                end)
                if not ok then
                  ngx.log(ngx.ERR, "cgemma error: ", err)
                  ws:send_close()
                  ngx.exit(ngx.OK)
                end
              end
            else
              local bytes, err = ws:send_text(require("cjson.safe").encode({
                role = "system",
                text = "Unsupported role!"
              }))
              if not bytes then
                release_gemma(gemma)
                ngx.log(ngx.ERR, "websocket error: ", err)
                ngx.exit(ngx.OK)
              end
            end
          elseif tp == "ping" then
            local bytes, err = wb:send_pong()
            if not bytes then
              release_gemma(gemma)
              ngx.log(ngx.ERR, "websocket error: ", err)
              ngx.exit(ngx.OK)
            end
          elseif tp == "close" then
            release_gemma(gemma)
            ngx.exit(ngx.OK)
          elseif tp ~= "pong" then
            release_gemma(gemma)
            if err then
              ngx.log(ngx.ERR, "websocket error: ", err)
            end
            ws:send_close()
            ngx.exit(ngx.OK)
          end
        end
        ws:send_text(require("cjson.safe").encode({
          role = "system",
          text = "Exceed the maximum number of tokens!"
        }))
        release_gemma(gemma)
      }
    }
  }
}
